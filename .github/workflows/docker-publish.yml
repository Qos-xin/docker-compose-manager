name: Docker 镜像构建与发布

on:
  push:
    branches: [ "main", "master" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main", "master" ]

env:
  # 使用 GitHub 容器仓库
  REGISTRY: ghcr.io
  # github.repository 格式为 {用户名}/{仓库名}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # 这个权限是为了在 PR 中添加标签
      pull-requests: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      # 登录到 GitHub 容器仓库
      - name: 登录到 GitHub 容器仓库
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 提取元数据（标签、标签）用于 Docker
      - name: 提取 Docker 元数据
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # 设置版本策略
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      # 设置 Docker Buildx
      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 构建并推送 Docker 镜像
      - name: 构建并推送 Docker 镜像
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 如果是 PR，添加评论
      - name: 添加 PR 评论
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `✅ Docker 镜像构建成功！\n\n镜像 ID: \`${{ steps.build-and-push.outputs.digest }}\``
            }); 